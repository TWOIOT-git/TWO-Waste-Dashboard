schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createSensor(input: CreateSensorInput!): Sensor
  deleteSensor(input: DeleteSensorInput!): Sensor
  updateSensor(input: UpdateSensorInput!): Sensor
}

type Query {
  getSensor(sensor_id: ID!): Sensor
  listSensors(filter: TableSensorFilterInput, limit: Int, nextToken: String): SensorConnection
}

type Sensor {
  created_on: AWSTimestamp
  updated_on: AWSTimestamp
  customer_id: String
  fill_percentage: Float
  sensor_id: ID!
  reports: String
  bin_location: String
  bin_type: String
  min_distance: Int
  max_distance: Int
  latitude: Float
  longitude: Float
  firmware_version: String
}

type SensorConnection {
  items: [Sensor]
  nextToken: String
}

type Subscription {
  onCreateSensor: Sensor @aws_subscribe(mutations : ["createSensor"])
  onDeleteSensor: Sensor @aws_subscribe(mutations : ["deleteSensor"])
  onUpdateSensor: Sensor @aws_subscribe(mutations : ["updateSensor"])
}

input CreateSensorInput {
  created_on: AWSTimestamp
  updated_on: AWSTimestamp
  customer_id: String
  fill_percentage: Float
  sensor_id: ID!
  reports: String
  bin_location: String
  bin_type: String
  min_distance: Int
  max_distance: Int
  latitude: Float
  longitude: Float
  firmware_version: String
}

input DeleteSensorInput {
  sensor_id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableSensorFilterInput {
  created_on: TableIntFilterInput
  updated_on: TableIntFilterInput
  customer_id: TableStringFilterInput
  fill_percentage: TableFloatFilterInput
  sensor_id: TableIDFilterInput
  reports: TableStringFilterInput
  bin_location: TableStringFilterInput
  bin_type: TableStringFilterInput
  min_distance: Int
  max_distance: Int
  latitude: Float
  longitude: Float
  firmware_version: String

}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateSensorInput {
  created_on: AWSTimestamp
  updated_on: AWSTimestamp
  customer_id: String
  fill_percentage: Float
  sensor_id: ID!
  reports: String
  bin_location: String
  bin_type: String
  min_distance: Int
  max_distance: Int
  latitude: Float
  longitude: Float
  firmware_version: String

}
